generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type CommercialAgentInfo {
  email String
  name  String
  phone String
}

type FranchiseAgentInfo {
  email String
  name  String
  phone String
}

type ResidencyAgentInfo {
  email       String
  name        String
  phoneNumber String
}

type ResidencyFacilities {
  bathrooms String
  bedrooms  String
  parking   String
}

type ResidencyRooms {
  dimensions String
  flooring   String
  level      String
  type       String
}

type UserBookedVisits {
  date String
  id   String
}

model Commercial {
  id                     String              @id @default(auto()) @map("_id") @db.ObjectId
  Area                   String
  EstimatedPaybackPeriod String
  address                String
  agentInfo              CommercialAgentInfo
  annualRevenue          String
  city                   String
  commercialType         String
  description            String
  estimatedProfit        String
  image                  String
  images                 String[]
  mlsNumber              String
  price                  String
  title                  String
  totalInvestment        String
  type                   String
  taxed                  Boolean
  isFeature             Boolean?
}

model Franchise {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  agentInfo    FranchiseAgentInfo
  description  String
  franchiseFee Float
  image        String
  images       String[]
  investment   String
  maps         String[]
  rent         String
  sales        String
  size         String
  targetPeople String
  title        String
  manual       String?
  isFeature    Boolean?
}

model Residency {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  address        String
  agentInfo      ResidencyAgentInfo
  amenities      String[]
  city           String
  taxed          Boolean
  isFeature     Boolean?
  /// Multiple data types found: Float: 20%, Int: 80% out of 5 sampled entries
  condoFee       Json?
  country        String
  createdAt      DateTime            @default(now())
  description    String
  facilities     ResidencyFacilities
  image          String
  images         String[]
  /// Multiple data types found: Float: 35.3%, Int: 64.7% out of 17 sampled entries
  livingSpace    Json?
  location       String?
  /// Multiple data types found: Float: 66.7%, Int: 33.3% out of 4 sampled entries
  lotSize        Json?
  mlsNumber      String
  /// Multiple data types found: Float: 14.3%, Int: 85.7% out of 7 sampled entries
  municipalTaxes Json?
  /// Multiple data types found: Int: 94.7%, BigInt: 5.3% out of 19 sampled entries
  price          Json
  propertyType   String
  rooms          ResidencyRooms[]
  /// Multiple data types found: Float: 14.3%, Int: 85.7% out of 7 sampled entries
  schoolTaxes    Json?
  title          String
  type           String
  updatedAt      DateTime            @updatedAt
  userEmail      String
  owner       User     @relation("Owner", fields: [userEmail], references: [email])
  /// Multiple data types found: Int: 94.7%, BigInt: 5.3% out of 19 sampled entries
  yearBuild      Json

  @@unique([mlsNumber, userEmail])
}

model User {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  bookedVisits     UserBookedVisits[]
  email            String             @unique
  favResidenciesID String[]           @db.ObjectId
  ownedResidencies Residency[] @relation("Owner")
}
